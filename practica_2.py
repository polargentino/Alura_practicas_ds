'''
üßπ 3. Limpieza de Datos con pandas
¬øQu√© vas a aprender en este bloque?

C√≥mo tratar valores nulos (NaN).

C√≥mo eliminar duplicados.

C√≥mo corregir errores en texto (por ejemplo, normalizar categor√≠as).

C√≥mo transformar tipos de datos si es necesario.
'''
import pandas as pd
import unicodedata

# Funci√≥n para normalizar texto (quitar acentos y convertir a min√∫sculas con guiones bajos)
def normalize_text(text):
    if pd.isnull(text): return ""  # Evitar errores con NaN
    return ''.join(
        c for c in unicodedata.normalize('NFD', str(text))
        if unicodedata.category(c) != 'Mn'
    ).lower().replace(" ", "_")

# Cargar el archivo CSV
url = "https://raw.githubusercontent.com/alura-es-cursos/challenge1-data-science-latam/refs/heads/main/base-de-datos-challenge1-latam/tienda_1%20.csv"
try:
    tienda = pd.read_csv(url)
except Exception as e:
    print(f"‚ùå Error al cargar el archivo: {e}")
    exit()

# Normalizar nombres de columnas
tienda.columns = [normalize_text(col.strip()) for col in tienda.columns]
print("üß† Columnas disponibles:", tienda.columns.tolist())

# ‚úÖ Revisi√≥n de valores nulos
print("\nüîç Conteo de valores nulos por columna:")
print(tienda.isnull().sum())

# ‚úÖ Eliminaci√≥n de duplicados
filas_antes = tienda.shape[0]
tienda = tienda.drop_duplicates()
filas_despues = tienda.shape[0]
print(f"\nüßπ Duplicados eliminados: {filas_antes - filas_despues}")

# ‚úÖ Eliminar filas con valores nulos importantes (por ejemplo: producto o precio)
tienda = tienda.dropna(subset=['producto', 'precio'])
print(f"üìâ Filas despu√©s de eliminar nulos cr√≠ticos: {tienda.shape[0]}")

# ‚úÖ Corregir errores en la categor√≠a (espacios, acentos, may√∫sculas)
tienda['categoria_del_producto'] = tienda['categoria_del_producto'].apply(normalize_text)

# ‚úÖ Ver categor√≠as √∫nicas despu√©s de normalizar
print("\nüè∑Ô∏è Categor√≠as √∫nicas despu√©s de normalizar:")
print(sorted(tienda['categoria_del_producto'].unique()))

# ‚úÖ Asegurar que el tipo de dato de 'precio' sea num√©rico
tienda['precio'] = pd.to_numeric(tienda['precio'], errors='coerce')

# ‚úÖ Eliminar nuevamente posibles NaN creados por conversiones
tienda = tienda.dropna(subset=['precio'])

# ‚úÖ Resetear el √≠ndice despu√©s de limpiezas
tienda.reset_index(drop=True, inplace=True)

print("\n‚úÖ Limpieza completa. DataFrame listo para an√°lisis.")
print(tienda.head())

'''
üß† Columnas disponibles: ['producto', 'categoria_del_producto', 'precio', 'costo_de_envio', 'fecha_de_compra', 'vendedor', 'lugar_de_compra', 'calificacion', 'metodo_de_pago', 'cantidad_de_cuotas', 'lat', 'lon']

üîç Conteo de valores nulos por columna:
producto                  0
categoria_del_producto    0
precio                    0
costo_de_envio            0
fecha_de_compra           0
vendedor                  0
lugar_de_compra           0
calificacion              0
metodo_de_pago            0
cantidad_de_cuotas        0
lat                       0
lon                       0
dtype: int64

üßπ Duplicados eliminados: 0
üìâ Filas despu√©s de eliminar nulos cr√≠ticos: 2359

üè∑Ô∏è Categor√≠as √∫nicas despu√©s de normalizar:
['articulos_para_el_hogar', 'deportes_y_diversion', 'electrodomesticos', 'electronicos', 'instrumentos_musicales', 'juguetes', 'libros', 'muebles']

‚úÖ Limpieza completa. DataFrame listo para an√°lisis.
            producto categoria_del_producto    precio  ...  cantidad_de_cuotas       lat       lon
0  Asistente virtual           electronicos  164300.0  ...                   8   4.60971 -74.08175
1    Mesa de comedor                muebles  192300.0  ...                   4   6.25184 -75.56359
2      Juego de mesa               juguetes  209600.0  ...                   1  10.39972 -75.51444
3         Microondas      electrodomesticos  757500.0  ...                   1   3.43722 -76.52250
4   Silla de oficina                muebles  335200.0  ...                   1   6.25184 -75.56359

[5 rows x 12 columns]
                     
'''
